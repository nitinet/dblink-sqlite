import { Handler, model } from 'dblink-core';
import sqlite from 'sqlite3';
import stream from 'stream';
export default class Sqlite extends Handler {
  connectionPool;
  constructor(config) {
    super(config);
    this.connectionPool = new sqlite.Database(config, err => {
      if (err) throw err;
    });
  }
  async getConnection() {
    return this.connectionPool;
  }
  async initTransaction(conn) {
    await new Promise((res, rej) => {
      conn.run('BEGIN TRANSACTION', (data, err) => {
        if (err) rej(err);
        else res(data);
      });
    });
  }
  async commit(conn) {
    await new Promise((res, rej) => {
      conn.run('COMMIT', (data, err) => {
        if (err) rej(err);
        else res(data);
      });
    });
  }
  async rollback(conn) {
    await new Promise((res, rej) => {
      conn.run('ROLLBACK', (data, err) => {
        if (err) rej(err);
        else res(data);
      });
    });
  }
  async close() {}
  async run(query, dataArgs, connection) {
    const conn = connection ?? this.connectionPool;
    const data = await new Promise((res, rej) => {
      conn.all(query, dataArgs, function (err, r) {
        if (err) {
          rej(err);
        } else {
          res(r);
        }
      });
    });
    const result = new model.ResultSet();
    result.rows = data;
    return result;
  }
  runStatement(queryStmt, connection) {
    const { query, dataArgs } = this.prepareQuery(queryStmt);
    return this.run(query, dataArgs, connection);
  }
  async stream(query, dataArgs, connection) {
    const conn = connection ?? this.connectionPool;
    const dataStream = new stream.Duplex();
    conn.each(
      query,
      dataArgs,
      (err, row) => {
        if (err) throw err;
        dataStream.write(row);
      },
      err => {
        if (err) throw err;
        dataStream.write(null);
      }
    );
    return dataStream;
  }
  streamStatement(queryStmt, connection) {
    const { query, dataArgs } = this.prepareQuery(queryStmt);
    return this.stream(query, dataArgs, connection);
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBTyxNQUFNLGFBQWEsQ0FBQztBQUNsRCxPQUFPLE1BQU0sTUFBTSxTQUFTLENBQUM7QUFDN0IsT0FBTyxNQUFNLE1BQU0sUUFBUSxDQUFDO0FBVTVCLE1BQU0sQ0FBQyxPQUFPLE9BQU8sTUFBTyxTQUFRLE9BQU87SUFNekMsY0FBYyxDQUFtQjtJQVFqQyxZQUFZLE1BQWM7UUFDeEIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRWQsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxFQUFFO1lBQ3RELElBQUksR0FBRztnQkFBRSxNQUFNLEdBQUcsQ0FBQztRQUNyQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFRRCxLQUFLLENBQUMsYUFBYTtRQUNqQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDN0IsQ0FBQztJQVNELEtBQUssQ0FBQyxlQUFlLENBQUMsSUFBcUI7UUFDekMsTUFBTSxJQUFJLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUM3QixJQUFJLENBQUMsR0FBRyxDQUFDLG1CQUFtQixFQUFFLENBQUMsSUFBYSxFQUFFLEdBQWlCLEVBQUUsRUFBRTtnQkFDakUsSUFBSSxHQUFHO29CQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQzs7b0JBQ2IsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2pCLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBU0QsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFxQjtRQUNoQyxNQUFNLElBQUksT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQzdCLElBQUks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
